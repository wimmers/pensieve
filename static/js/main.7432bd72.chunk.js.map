{"version":3,"sources":["graph_style.js","GraphView.js","App.js","reportWebVitals.js","index.js"],"names":["graph_style","selector","style","GraphView","state","w","h","loading","container","React","createRef","id_counter","addNodeFromEvent","event","pos","position","data","id","label","cy","add","select","addEdge","source","target","undefined","group","setUpListeners","on","node","selectify","props","onTapNode","unselectify","onTapBackground","onSelectEdge","onSelectNode","onDeselectNode","layout","name","nodeDimensionsIncludeLabels","componentSpacing","this","run","setState","fetch","mode","res","json","elements","current","offsetWidth","offsetHeight","runLayout","loadGraph","ref","width","height","stylesheet","boxSelectionEnabled","Component","deenumerate","list","result","i","length","Tags","useState","tags","enumerate","setTags","allowNew","onDelete","newTags","slice","splice","onChangeTags","onAddition","tag","concat","Input","value","setValue","useEffect","delayDebounceFn","setTimeout","onChange","clearTimeout","Form","Control","plaintext","type","className","empty_info","App","selected","adding","linking","searchQuery","lastCursor","graphView","markdownEditor","sendJSON","endpoint","method","body","JSON","stringify","headers","sendAddNote","sendChangeNote","onAddNote","onAddFrom","onAddCrossref","onAddLink","unsetFlags","targetName","text","move","insertTextAtCursor","edge","timestamp","Date","toISOString","info","created","modified","CodeMirror","editor","updateAndSend","diff","updateMarkdown","cursor","getDoc","getCursor","sticky","line","ch","getValue","note","onChangeName","onSearch","query","connected","$","union","neighborhood","notConnected","not","remove","onRefresh","bind","doc","replaceRange","setCursor","focus","linkDisabled","Container","fluid","Button","variant","onClick","disabled","Row","Col","xs","lg","xl","onBlur","visible","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7432bd72.chunk.js","sourcesContent":["const graph_style =\n    [\n        {\n            selector: 'node',\n            style: {\n                \"text-wrap\": \"wrap\",\n                \"text-max-width\": \"90px\",\n                \"font-size\": \"12px\",\n                \"text-valign\": \"center\",\n                \"text-halign\": \"center\",\n                \"background-color\": \"#555\",\n                \"text-outline-color\": \"#555\",\n                \"text-outline-width\": \"2px\",\n                \"color\": \"#fff\",\n                \"overlay-padding\": \"6px\",\n                \"z-index\": \"10\",\n                'width': \"100px\",\n                'height': \"50px\",\n                \"shape\": \"round-rectangle\"\n            }\n        },\n\n        {\n            selector: 'node[label]',\n            style: {\n                'label': 'data(label)'\n            }\n        },\n\n        {\n            selector: 'node[group=\"tag\"]',\n            style: {\n                \"shape\": \"round-pentagon\",\n                \"height\": \"75px\",\n                \"background-color\": \"#515\",\n                \"text-outline-color\": \"#515\",\n            }\n        },\n\n        {\n            \"selector\": \"node:selected\",\n            \"style\": {\n                \"border-width\": \"6px\",\n                \"border-color\": \"#AAD8FF\",\n                \"border-opacity\": \"0.5\"\n            }\n        },\n\n        {\n            selector: 'edge',\n            style: {\n                'curve-style': 'bezier',\n                'target-arrow-shape': 'triangle'\n            }\n        },\n\n        {\n            selector: 'edge[style]',\n            style: {\n                'line-style': 'data(style)'\n            }\n        }\n    ]\nexport default graph_style","import React, { Component } from 'react'\nimport CytoscapeComponent from 'react-cytoscapejs'\nimport style from './graph_style.js'\n\nexport default class GraphView extends Component {\n\n    state = {\n        w: 0,\n        h: 0,\n        loading: true\n    }\n\n    container = React.createRef()\n\n    runLayout() {\n        this.cy.layout(this.layout).run()\n    }\n\n\n    async loadGraph() {\n        const path = process.env.REACT_APP_DEMO ? 'tutorial.json' : '/init'\n        this.setState({ ...this.state, loading: true })\n        const res = await fetch(path, { mode: 'no-cors' })\n        const json = await res.json()\n        this.setState({\n            elements: json,\n            loading: false,\n            w: this.container.current.offsetWidth,\n            h: this.container.current.offsetHeight\n        })\n        this.runLayout()\n        this.setUpListeners()\n    }\n\n\n    componentDidMount() {\n        this.loadGraph()\n    }\n\n    id_counter = 0\n\n    addNodeFromEvent = event => {\n        const pos = event.position\n        const id = 'new_' + this.id_counter\n        const label = \"Node \" + this.id_counter++\n        const data = { data: { id: id, label: label }, position: pos }\n        const node = this.cy.add(data).select()\n        return node\n    }\n\n    addEdge = (source, target, style, label = undefined) => {\n        this.cy.add({\n            group: 'edges',\n            data: {\n                source: source,\n                target: target,\n                style: style,\n                label: label\n            }\n        })\n    }\n\n    setUpListeners = () => {\n        this.cy.on('tap', 'node', (event) => {\n            const node = event.target\n            node.selectify()\n            const stopSelection = this.props.onTapNode(node)\n            if (stopSelection) {\n                node.unselectify()\n            }\n        })\n        this.cy.on('tap', (event) => {\n            if (event.target === this.cy) {\n                this.props.onTapBackground(event)\n            }\n        })\n        this.cy.on('select', 'edge', event => {\n            this.props.onSelectEdge(event.target)\n        })\n        this.cy.on('select', 'node', (event) => {\n            this.props.onSelectNode(event.target)\n        })\n        this.cy.on('unselect', 'node', (event) => {\n            this.props.onDeselectNode(event.target)\n        })\n    }\n\n\n    layout = {\n        name: 'cose',\n        nodeDimensionsIncludeLabels: true,\n        componentSpacing: 100\n    }\n\n    style = style\n\n    render() {\n        return (\n            <div ref={this.container} id=\"graphview-container\">\n                {this.state.loading ?\n                    <p>Waiting for data to load!</p> :\n                    <CytoscapeComponent\n                        elements={this.state.elements}\n                        style={{ width: this.state.w, height: this.state.h }}\n                        stylesheet={this.style}\n                        cy={(cy) => { this.cy = cy }}\n                        boxSelectionEnabled={true}\n                    />\n                }\n            </div>\n        )\n    }\n\n}","import './App.css';\nimport React, { Component, useState, useEffect } from 'react'\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport GraphView from './GraphView';\nimport MarkdownEditor from '@uiw/react-markdown-editor';\nimport ReactTags from 'react-tag-autocomplete';\n\n\nconst enumerate = (list) => {\n  const result = []\n  for (var i = 0; i < list.length; i++) {\n    result[i] = { id: i, name: list[i] }\n  }\n  return result\n}\n\nconst deenumerate = (list) => {\n  const result = []\n  for (var i = 0; i < list.length; i++) {\n    result[i] = list[i].name\n  }\n  return result\n}\n\nconst Tags = (props) => {\n  const [tags, setTags] = useState(props.tags ? enumerate(props.tags) : [])\n\n  const onDeleteTag = (i) => {\n    const newTags = tags.slice(0)\n    newTags.splice(i, 1)\n    setTags(newTags)\n    props.onChangeTags(deenumerate(newTags))\n  }\n\n  const onAddTag = (tag) => {\n    const newTags = [].concat(tags, tag)\n    setTags(newTags)\n    props.onChangeTags(deenumerate(newTags))\n  }\n\n  return (\n    <ReactTags\n      allowNew={true}\n      // suggestions={state.suggestions}\n      tags={tags}\n      onDelete={onDeleteTag}\n      onAddition={onAddTag}\n    />\n  )\n}\n\nconst Input = (props) => {\n  const [value, setValue] = useState(props.value)\n\n  useEffect(() => {\n    const delayDebounceFn = setTimeout(() => {\n      props.onChange(value)\n    }, 300)\n\n    return () => clearTimeout(delayDebounceFn)\n  })\n\n  return (\n    <Form.Control\n      plaintext\n      type=\"text\"\n      value={value}\n      onChange={(event) => setValue(event.target.value)}\n      className=\"mb-2 title\"\n    />\n  )\n}\n\n\nconst empty_info = {\n  \"attachments\": null,\n  \"deleted\": null,\n  \"favorited\": null,\n  \"pinned\": null,\n  \"tags\": null,\n  \"name\": null,\n  \"created\": null,\n  \"modified\": null\n}\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.onRefresh = this.onRefresh.bind(this)\n  }\n\n  state = {\n    selected: undefined,\n    adding: null,\n    linking: null,\n    searchQuery: '',\n    lastCursor: undefined\n  }\n\n  graphView = React.createRef()\n\n  markdownEditor = React.createRef()\n\n  sendJSON = (endpoint, json) => {\n    return fetch(endpoint, {\n      mode: 'no-cors',\n      method: 'POST',\n      body: JSON.stringify(json),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n  }\n\n  sendAddNote = node => {\n    if (!process.env.REACT_APP_DEMO)\n      return this.sendJSON('/add', node)\n  }\n\n  sendChangeNote = (node) => {\n    if (!process.env.REACT_APP_DEMO)\n      return this.sendJSON('/update', node)\n  }\n\n  onAddNote = data => {\n    this.setState({ ...this.state, adding: \"note\" })\n  }\n\n  onAddFrom = data => {\n    this.setState({ ...this.state, linking: \"from\" })\n  }\n\n  onAddCrossref = data => {\n    this.setState({ ...this.state, linking: \"crossref\" })\n  }\n\n  onAddLink = data => {\n    this.setState({ ...this.state, linking: \"link\" })\n  }\n\n  unsetFlags = () => {\n    this.setState({ ...this.state, adding: null, linking: null })\n  }\n\n  insertTextAtCursor(text, move=undefined) {\n    const editor = this.markdownEditor.current.CodeMirror.editor\n    const doc = editor.getDoc()\n    const cursor = this.state.lastCursor || doc.getCursor()\n    doc.replaceRange(text, cursor)\n    if (move) {\n      editor.setCursor(cursor.line, cursor.ch + move)\n    }\n    editor.focus()\n  }\n\n  onTapNode = node => {\n    const state = this.state\n    if (state.linking && state.selected) {\n      const targetName = node.data('label')\n      var text = `[#${state.linking}](@note/${targetName}.md)`\n      var move = text.length\n      let style, label;\n      switch (state.linking) {\n        case 'from': style = 'solid'; label = undefined; break;\n        case 'crossref': style = 'dashed'; label = undefined; break;\n        case 'link':\n          style = 'dotted'; label = 'link'\n          text = `[](${targetName}.md)`\n          move = 1\n      }\n      this.graphView.current.addEdge(state.selected.data('id'), node.data('id'), style, label)\n      this.insertTextAtCursor(text, move)\n      this.unsetFlags()\n      return true\n    }\n    this.unsetFlags()\n    return false\n  }\n\n  onSelectEdge = edge => {\n    this.unsetFlags()\n  }\n\n  onTapBackground = event => {\n    if (this.state.adding === \"note\") {\n      const graphView = this.graphView.current\n      const node = graphView.addNodeFromEvent(event)\n      const name = \"Untitled\"\n      const timestamp = new Date().toISOString()\n      const info = { ...empty_info, name: name, created: timestamp, modified: timestamp }\n      node.json({ data: { info: info, label: name } })\n      this.sendAddNote(node.data())\n    }\n    this.unsetFlags()\n  }\n\n  async onRefresh(data) {\n    const state = this.state\n    if (state.selected) {\n      await this.sendChangeNote(state.selected.data())\n    }\n    this.graphView.current.loadGraph()\n    this.setState({ ...this.state, searchQuery: '' })\n  }\n\n  onSelectNode = node => {\n    this.setState({ ...this.state, selected: node })\n    const value = node.data('note') || ''\n    this.markdownEditor.current.CodeMirror.editor.setValue(value)\n  }\n\n  onDeselectNode = node => {\n    this.setState({ ...this.state, selected: null, lastCursor: null })\n  }\n\n  updateAndSend = (diff) => {\n    const node = this.state.selected\n    node.json(diff)\n    this.sendChangeNote(node.data())\n  }\n\n  updateMarkdown = (editor) => {\n    const cursor = editor.getDoc().getCursor()\n    if (cursor.sticky || cursor.line !== 0 || cursor.ch !== 0)\n      this.setState({...this.state, lastCursor: cursor})\n    const node = this.state.selected\n    if (!node)\n      return\n    const value = editor.getValue()\n    if (value === node.data('note'))\n      return\n    const timestamp = new Date().toISOString()\n    const info = { ...node.data('info'), modified: timestamp }\n    const diff = { data: { note: value, info: info } }\n    editor.setValue(value)\n    this.updateAndSend(diff)\n  }\n\n  onChangeTags = (tags) => {\n    const node = this.state.selected\n    const diff = { data: { info: { ...node.data('info'), tags } } }\n    this.updateAndSend(diff)\n  }\n\n  onChangeName = (value) => {\n    const node = this.state.selected\n    const diff = { data: { info: { ...node.data('info'), name: value }, label: value } }\n    this.updateAndSend(diff)\n  }\n\n  onSearch = (event) => {\n    const value = event.target.value\n    this.setState({ ...this.state, searchQuery: value, selected: undefined })\n    if (!value || this.state.searchQuery === value)\n      return\n    const graphView = this.graphView.current\n    const cy = graphView.cy\n    const query = `node[label *= \"${value}\"], node[note *= \"${value}\"]`\n    var connected = cy.$(query)\n    connected = connected.union(connected.neighborhood())\n    const notConnected = cy.elements().not(connected);\n    const removed = cy.remove(notConnected);\n    if (removed.length > 0)\n      graphView.runLayout()\n  }\n\n  render() {\n    const state = this.state\n    const node = state.selected\n    const linkDisabled = !node\n    return ([\n      <Container fluid>\n        <div className=\"graphview\">\n          <GraphView\n            onSelectEdge={this.onSelectEdge}\n            onSelectNode={this.onSelectNode}\n            onDeselectNode={this.onDeselectNode}\n            onTapBackground={this.onTapBackground}\n            onTapNode={this.onTapNode}\n            ref={this.graphView}\n          />\n        </div>\n      </Container>,\n      <Container fluid className=\"p-3\">\n        <div className=\"mb-1\">\n          <Button className=\"mb-1\" variant=\"primary\" onClick={this.onAddNote}>\n            + note\n          </Button>{' '}\n          <Button className=\"mb-1\" variant=\"secondary\"\n            onClick={this.onAddFrom} disabled={linkDisabled}>\n            + from\n          </Button>{' '}\n          <Button className=\"mb-1\" variant=\"dark\"\n            onClick={this.onAddCrossref} disabled={linkDisabled}>\n            + crossref\n          </Button>{' '}\n          <Button className=\"mb-1\" variant=\"light\"\n            onClick={this.onAddLink} disabled={linkDisabled}>\n            + link\n          </Button>{' '}\n          <Button className=\"mb-1\" variant=\"danger\" onClick={this.onRefresh}>\n            refresh\n          </Button>\n        </div>\n        <Row>\n          <Col xs=\"12\" lg=\"8\" xl=\"9\" className='mb-2'>\n            <MarkdownEditor\n              onBlur={this.updateMarkdown}\n              visible={false}\n              height={500}\n              ref={this.markdownEditor}\n            />\n          </Col>\n          <Col xs=\"12\" lg=\"4\" xl=\"3\">\n            {\n              !(node && node.data('info')) ? '' :\n                <div className='mb-2'>\n                  <Input\n                    value={node.data('label')}\n                    onChange={this.onChangeName}\n                  />{' '}\n                  <Tags\n                    tags={node.data('info').tags}\n                    onChangeTags={this.onChangeTags}\n                  />\n                </div>\n            }\n            <div>\n              <div>\n                <span>Search:</span>\n                <Form.Control\n                  type=\"text\"\n                  value={state.searchQuery}\n                  onChange={this.onSearch}\n                />\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    ]);\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}